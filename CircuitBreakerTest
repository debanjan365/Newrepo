@Test
void testCircuitBreakerOpensAfterFailures() {
    CircuitBreakerConfig circuitBreakerConfig = CircuitBreakerConfig.custom()
            .failureRateThreshold(50)
            .minimumNumberOfCalls(5) // At least 5 calls to evaluate failure
            .slidingWindowSize(10)  // Sliding window of 10 calls
            .build();

    CircuitBreakerRegistry circuitBreakerRegistry = CircuitBreakerRegistry.of(circuitBreakerConfig);
    CircuitBreaker circuitBreaker = circuitBreakerRegistry.circuitBreaker("myCircuitBreaker");

    Supplier<AttributesType> decoratedSupplier = CircuitBreaker.decorateSupplier(circuitBreaker, () -> {
        throw new RuntimeException("Simulated exception");
    });

    // Make multiple calls to trigger the circuit breaker
    for (int i = 0; i < 5; i++) {
        assertThrows(RuntimeException.class, decoratedSupplier::get);
    }

    // After the failure rate threshold is reached, the circuit breaker should open
    assertThrows(CallNotPermittedException.class, decoratedSupplier::get);
}
